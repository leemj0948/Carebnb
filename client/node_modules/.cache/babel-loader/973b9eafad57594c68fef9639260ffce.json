{"ast":null,"code":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\nvar utils = require('../utils');\n\nvar stripeMethod = StripeResource.method;\nmodule.exports = StripeResource.extend({\n  path: 'customers',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del', 'setMetadata', 'getMetadata'],\n\n  /**\n   * Customer: Subscription methods\n   */\n  _legacyUpdateSubscription: stripeMethod({\n    method: 'POST',\n    path: '{customerId}/subscription',\n    urlParams: ['customerId']\n  }),\n  _newstyleUpdateSubscription: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId']\n  }),\n  _legacyCancelSubscription: stripeMethod({\n    method: 'DELETE',\n    path: '{customerId}/subscription',\n    urlParams: ['customerId']\n  }),\n  _newstyleCancelSubscription: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId']\n  }),\n  createSubscription: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/subscriptions',\n    urlParams: ['customerId']\n  }),\n  listSubscriptions: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/subscriptions',\n    urlParams: ['customerId'],\n    methodType: 'list'\n  }),\n  retrieveSubscription: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId']\n  }),\n  updateSubscription: function (customerId, subscriptionId) {\n    if (typeof subscriptionId == 'string') {\n      return this._newstyleUpdateSubscription.apply(this, arguments);\n    } else {\n      return this._legacyUpdateSubscription.apply(this, arguments);\n    }\n  },\n  cancelSubscription: function (customerId, subscriptionId) {\n    // This is a hack, but it lets us maximize our overloading.\n    // Precarious assumption: If it's not an auth key it _could_ be a sub id:\n    if (typeof subscriptionId == 'string' && !utils.isAuthKey(subscriptionId)) {\n      return this._newstyleCancelSubscription.apply(this, arguments);\n    } else {\n      return this._legacyCancelSubscription.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Customer: Card methods\n   */\n  createCard: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/cards',\n    urlParams: ['customerId']\n  }),\n  listCards: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/cards',\n    urlParams: ['customerId'],\n    methodType: 'list'\n  }),\n  retrieveCard: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId']\n  }),\n  updateCard: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId']\n  }),\n  deleteCard: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId']\n  }),\n\n  /**\n   * Customer: Source methods\n   */\n  createSource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources',\n    urlParams: ['customerId']\n  }),\n  listSources: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/sources',\n    urlParams: ['customerId'],\n    methodType: 'list'\n  }),\n  retrieveSource: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId']\n  }),\n  updateSource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId']\n  }),\n  deleteSource: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId']\n  }),\n  verifySource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources/{sourceId}/verify',\n    urlParams: ['customerId', 'sourceId']\n  }),\n\n  /**\n   * Customer: Discount methods\n   */\n  deleteDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/discount',\n    urlParams: ['customerId']\n  }),\n  deleteSubscriptionDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/subscriptions/{subscriptionId}/discount',\n    urlParams: ['customerId', 'subscriptionId']\n  }),\n\n  /**\n   * Customer: TaxId methods\n   */\n  createTaxId: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/tax_ids',\n    urlParams: ['customerId']\n  }),\n  deleteTaxId: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/tax_ids/{taxIdId}',\n    urlParams: ['customerId', 'taxIdId']\n  }),\n  listTaxIds: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/tax_ids',\n    urlParams: ['customerId'],\n    methodType: 'list'\n  }),\n  retrieveTaxId: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/tax_ids/{taxIdId}',\n    urlParams: ['customerId', 'taxIdId']\n  })\n});","map":{"version":3,"sources":["C:/Developing/portfolios/bnb_clone/node_modules/stripe/lib/resources/Customers.js"],"names":["StripeResource","require","utils","stripeMethod","method","module","exports","extend","path","includeBasic","_legacyUpdateSubscription","urlParams","_newstyleUpdateSubscription","_legacyCancelSubscription","_newstyleCancelSubscription","createSubscription","listSubscriptions","methodType","retrieveSubscription","updateSubscription","customerId","subscriptionId","apply","arguments","cancelSubscription","isAuthKey","createCard","listCards","retrieveCard","updateCard","deleteCard","createSource","listSources","retrieveSource","updateSource","deleteSource","verifySource","deleteDiscount","deleteSubscriptionDiscount","createTaxId","deleteTaxId","listTaxIds","retrieveTaxId"],"mappings":"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","sourcesContent":["'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar utils = require('../utils');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'customers',\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update', 'del',\n    'setMetadata', 'getMetadata',\n  ],\n\n  /**\n   * Customer: Subscription methods\n   */\n\n  _legacyUpdateSubscription: stripeMethod({\n    method: 'POST',\n    path: '{customerId}/subscription',\n    urlParams: ['customerId'],\n  }),\n\n  _newstyleUpdateSubscription: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n\n  _legacyCancelSubscription: stripeMethod({\n    method: 'DELETE',\n    path: '{customerId}/subscription',\n    urlParams: ['customerId'],\n  }),\n\n  _newstyleCancelSubscription: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n\n  createSubscription: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/subscriptions',\n    urlParams: ['customerId'],\n  }),\n\n  listSubscriptions: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/subscriptions',\n    urlParams: ['customerId'],\n    methodType: 'list',\n  }),\n\n  retrieveSubscription: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n\n  updateSubscription: function(customerId, subscriptionId) {\n    if (typeof subscriptionId == 'string') {\n      return this._newstyleUpdateSubscription.apply(this, arguments);\n    } else {\n      return this._legacyUpdateSubscription.apply(this, arguments);\n    }\n  },\n\n  cancelSubscription: function(customerId, subscriptionId) {\n    // This is a hack, but it lets us maximize our overloading.\n    // Precarious assumption: If it's not an auth key it _could_ be a sub id:\n    if (typeof subscriptionId == 'string' && !utils.isAuthKey(subscriptionId)) {\n      return this._newstyleCancelSubscription.apply(this, arguments);\n    } else {\n      return this._legacyCancelSubscription.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Customer: Card methods\n   */\n\n  createCard: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/cards',\n    urlParams: ['customerId'],\n  }),\n\n  listCards: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/cards',\n    urlParams: ['customerId'],\n    methodType: 'list',\n  }),\n\n  retrieveCard: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId'],\n  }),\n\n  updateCard: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId'],\n  }),\n\n  deleteCard: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId'],\n  }),\n\n  /**\n   * Customer: Source methods\n   */\n\n  createSource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources',\n    urlParams: ['customerId'],\n  }),\n\n  listSources: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/sources',\n    urlParams: ['customerId'],\n    methodType: 'list',\n  }),\n\n  retrieveSource: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId'],\n  }),\n\n  updateSource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId'],\n  }),\n\n  deleteSource: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId'],\n  }),\n\n  verifySource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources/{sourceId}/verify',\n    urlParams: ['customerId', 'sourceId'],\n  }),\n\n  /**\n   * Customer: Discount methods\n   */\n\n  deleteDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/discount',\n    urlParams: ['customerId'],\n  }),\n\n  deleteSubscriptionDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/subscriptions/{subscriptionId}/discount',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n\n  /**\n   * Customer: TaxId methods\n   */\n\n  createTaxId: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/tax_ids',\n    urlParams: ['customerId'],\n  }),\n\n  deleteTaxId: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/tax_ids/{taxIdId}',\n    urlParams: ['customerId', 'taxIdId'],\n  }),\n\n  listTaxIds: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/tax_ids',\n    urlParams: ['customerId'],\n    methodType: 'list',\n  }),\n\n  retrieveTaxId: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/tax_ids/{taxIdId}',\n    urlParams: ['customerId', 'taxIdId'],\n  }),\n});\n"]},"metadata":{},"sourceType":"script"}