{"ast":null,"code":"'use strict';\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar path = require('path');\n\nvar uuid = require('uuid/v4');\n\nvar utils = require('./utils');\n\nvar Error = require('./Error');\n\nvar hasOwn = {}.hasOwnProperty;\nvar defaultHttpAgent = new http.Agent({\n  keepAlive: true\n});\nvar defaultHttpsAgent = new https.Agent({\n  keepAlive: true\n}); // Provide extension mechanism for Stripe Resource Sub-Classes\n\nStripeResource.extend = utils.protoExtend; // Expose method-creator & prepared (basic) methods\n\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\n\nfunction StripeResource(stripe, urlData) {\n  this._stripe = stripe;\n  this._urlData = urlData || {};\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function (methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize.apply(this, arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n  initialize: function () {},\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n  createFullPath: function (commandPath, urlData) {\n    return path.join(this.basePath(urlData), this.path(urlData), typeof commandPath == 'function' ? commandPath(urlData) : commandPath).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols: function (pathWithSymbols) {\n    return '/' + path.join(this.resourcePath, pathWithSymbols || '').replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n  createUrlData: function () {\n    var urlData = {}; // Merge in baseData\n\n    for (var i in this._urlData) {\n      if (hasOwn.call(this._urlData, i)) {\n        urlData[i] = this._urlData[i];\n      }\n    }\n\n    return urlData;\n  },\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n  _timeoutHandler: function (timeout, req, callback) {\n    var self = this;\n    return function () {\n      var timeoutErr = new Error('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n      req._isAborted = true;\n      req.abort();\n      callback.call(self, new Error.StripeConnectionError({\n        message: 'Request aborted due to timeout being reached (' + timeout + 'ms)',\n        detail: timeoutErr\n      }), null);\n    };\n  },\n  _responseHandler: function (req, callback) {\n    var self = this;\n    return function (res) {\n      var response = '';\n      res.setEncoding('utf8');\n      res.on('data', function (chunk) {\n        response += chunk;\n      });\n      res.on('end', function () {\n        var headers = res.headers || {}; // NOTE: Stripe responds with lowercase header names/keys.\n        // For convenience, make Request-Id easily accessible on\n        // lastResponse.\n\n        res.requestId = headers['request-id'];\n\n        var requestDurationMs = Date.now() - req._requestStart;\n\n        var responseEvent = utils.removeEmpty({\n          api_version: headers['stripe-version'],\n          account: headers['stripe-account'],\n          idempotency_key: headers['idempotency-key'],\n          method: req._requestEvent.method,\n          path: req._requestEvent.path,\n          status: res.statusCode,\n          request_id: res.requestId,\n          elapsed: requestDurationMs\n        });\n\n        self._stripe._emitter.emit('response', responseEvent);\n\n        try {\n          response = JSON.parse(response);\n\n          if (response.error) {\n            var err; // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n\n            if (typeof response.error === 'string') {\n              response.error = {\n                type: response.error,\n                message: response.error_description\n              };\n            }\n\n            response.error.headers = headers;\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new Error.StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new Error.StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new Error.StripeRateLimitError(response.error);\n            } else {\n              err = Error.StripeError.generate(response.error);\n            }\n\n            return callback.call(self, err, null);\n          }\n        } catch (e) {\n          return callback.call(self, new Error.StripeAPIError({\n            message: 'Invalid JSON received from the Stripe API',\n            response: response,\n            exception: e,\n            requestId: headers['request-id']\n          }), null);\n        }\n\n        self._recordRequestMetrics(res.requestId, requestDurationMs); // Expose res object\n\n\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res\n        });\n        callback.call(self, null, response);\n      });\n    };\n  },\n  _generateConnectionErrorMessage: function (requestRetries) {\n    return 'An error occurred with our connection to Stripe.' + (requestRetries > 0 ? ' Request was retried ' + requestRetries + ' times.' : '');\n  },\n  _errorHandler: function (req, requestRetries, callback) {\n    var self = this;\n    return function (error) {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n\n      callback.call(self, new Error.StripeConnectionError({\n        message: self._generateConnectionErrorMessage(requestRetries),\n        detail: error\n      }), null);\n    };\n  },\n  _shouldRetry: function (res, numRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= this._stripe.getMaxNetworkRetries()) {\n      return false;\n    } // Retry on connection error.\n\n\n    if (!res) {\n      return true;\n    } // Retry on conflict and availability errors.\n\n\n    if (res.statusCode === 409 || res.statusCode === 503) {\n      return true;\n    } // Retry on 5xx's, except POST's, which our idempotency framework\n    // would just replay as 500's again anyway.\n\n\n    if (res.statusCode >= 500 && res.req._requestEvent.method !== 'POST') {\n      return true;\n    }\n\n    return false;\n  },\n  _getSleepTimeInMS: function (numRetries) {\n    var initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n\n    var maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay(); // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n\n\n    var sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay); // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n\n    sleepSeconds *= 0.5 * (1 + Math.random()); // But never sleep less than the base sleep seconds.\n\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n    return sleepSeconds * 1000;\n  },\n  _defaultHeaders: function (auth, contentLength, apiVersion) {\n    var userAgentString = 'Stripe/v1 NodeBindings/' + this._stripe.getConstant('PACKAGE_VERSION');\n\n    if (this._stripe._appInfo) {\n      userAgentString += ' ' + this._stripe.getAppInfoAsString();\n    }\n\n    var headers = {\n      // Use specified auth token or use default from this stripe instance:\n      'Authorization': auth ? 'Bearer ' + auth : this._stripe.getApiField('auth'),\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': userAgentString\n    };\n\n    if (apiVersion) {\n      headers['Stripe-Version'] = apiVersion;\n    }\n\n    return headers;\n  },\n  _addTelemetryHeader: function (headers) {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      var metrics = this._stripe._prevRequestMetrics.shift();\n\n      headers['X-Stripe-Client-Telemetry'] = JSON.stringify({\n        'last_request_metrics': metrics\n      });\n    }\n  },\n  _recordRequestMetrics: function (requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          'request_id': requestId,\n          'request_duration_ms': requestDurationMs\n        });\n      }\n    }\n  },\n  _request: function (method, host, path, data, auth, options, callback) {\n    var self = this;\n    var requestData;\n\n    function makeRequestWithData(error, data) {\n      var apiVersion;\n      var headers;\n\n      if (error) {\n        return callback(error);\n      }\n\n      apiVersion = self._stripe.getApiField('version');\n      requestData = data;\n      headers = self._defaultHeaders(auth, requestData.length, apiVersion);\n\n      self._stripe.getClientUserAgent(function (cua) {\n        headers['X-Stripe-Client-User-Agent'] = cua;\n\n        if (options.headers) {\n          Object.assign(headers, options.headers);\n        }\n\n        self._addTelemetryHeader(headers);\n\n        makeRequest(apiVersion, headers);\n      });\n    }\n\n    if (self.requestDataProcessor) {\n      self.requestDataProcessor(method, data, options.headers, makeRequestWithData);\n    } else {\n      makeRequestWithData(null, utils.stringifyRequestData(data || {}));\n    }\n\n    function retryRequest(requestFn, apiVersion, headers, requestRetries) {\n      requestRetries += 1;\n      return setTimeout(requestFn, self._getSleepTimeInMS(requestRetries), apiVersion, headers, requestRetries);\n    }\n\n    function makeRequest(apiVersion, headers, numRetries) {\n      var timeout = self._stripe.getApiField('timeout');\n\n      var isInsecureConnection = self._stripe.getApiField('protocol') == 'http';\n\n      var agent = self._stripe.getApiField('agent');\n\n      if (agent == null) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      var req = (isInsecureConnection ? http : https).request({\n        host: host || self._stripe.getApiField('host'),\n        port: self._stripe.getApiField('port'),\n        path: path,\n        method: method,\n        agent: agent,\n        headers: headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5'\n      }); // If this is a POST and we allow multiple retries, set a idempotency key if one is not\n      // already provided.\n\n      if (method === 'POST' && self._stripe.getMaxNetworkRetries() > 0) {\n        if (!headers.hasOwnProperty('Idempotency-Key')) {\n          headers['Idempotency-Key'] = uuid();\n        }\n      }\n\n      var requestEvent = utils.removeEmpty({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method: method,\n        path: path\n      });\n      var requestRetries = numRetries || 0;\n      req._requestEvent = requestEvent;\n      req._requestStart = Date.now();\n\n      self._stripe._emitter.emit('request', requestEvent);\n\n      req.setTimeout(timeout, self._timeoutHandler(timeout, req, callback));\n      req.on('response', function (res) {\n        if (self._shouldRetry(res, requestRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries);\n        } else {\n          return self._responseHandler(req, callback)(res);\n        }\n      });\n      req.on('error', function (error) {\n        if (self._shouldRetry(null, requestRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries);\n        } else {\n          return self._errorHandler(req, requestRetries, callback)(error);\n        }\n      });\n      req.on('socket', function (socket) {\n        if (socket.connecting) {\n          socket.on(isInsecureConnection ? 'connect' : 'secureConnect', function () {\n            // Send payload; we're safe:\n            req.write(requestData);\n            req.end();\n          });\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    }\n  }\n};\nmodule.exports = StripeResource;","map":{"version":3,"sources":["C:/Developing/portfolios/bnb_clone/node_modules/stripe/lib/StripeResource.js"],"names":["http","require","https","path","uuid","utils","Error","hasOwn","hasOwnProperty","defaultHttpAgent","Agent","keepAlive","defaultHttpsAgent","StripeResource","extend","protoExtend","method","BASIC_METHODS","MAX_BUFFERED_REQUEST_METRICS","stripe","urlData","_stripe","_urlData","basePath","makeURLInterpolator","getApiField","resourcePath","includeBasic","forEach","methodName","initialize","apply","arguments","prototype","requestDataProcessor","validateRequest","createFullPath","commandPath","join","replace","createResourcePathWithSymbols","pathWithSymbols","createUrlData","i","call","wrapTimeout","callbackifyPromiseWithTimeout","_timeoutHandler","timeout","req","callback","self","timeoutErr","code","_isAborted","abort","StripeConnectionError","message","detail","_responseHandler","res","response","setEncoding","on","chunk","headers","requestId","requestDurationMs","Date","now","_requestStart","responseEvent","removeEmpty","api_version","account","idempotency_key","_requestEvent","status","statusCode","request_id","elapsed","_emitter","emit","JSON","parse","error","err","type","error_description","StripeAuthenticationError","StripePermissionError","StripeRateLimitError","StripeError","generate","e","StripeAPIError","exception","_recordRequestMetrics","Object","defineProperty","enumerable","writable","value","_generateConnectionErrorMessage","requestRetries","_errorHandler","_shouldRetry","numRetries","getMaxNetworkRetries","_getSleepTimeInMS","initialNetworkRetryDelay","getInitialNetworkRetryDelay","maxNetworkRetryDelay","getMaxNetworkRetryDelay","sleepSeconds","Math","min","pow","random","max","_defaultHeaders","auth","contentLength","apiVersion","userAgentString","getConstant","_appInfo","getAppInfoAsString","_addTelemetryHeader","getTelemetryEnabled","_prevRequestMetrics","length","metrics","shift","stringify","emitWarning","push","_request","host","data","options","requestData","makeRequestWithData","getClientUserAgent","cua","assign","makeRequest","stringifyRequestData","retryRequest","requestFn","setTimeout","isInsecureConnection","agent","request","port","ciphers","requestEvent","socket","connecting","write","end","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar http = require('http');\nvar https = require('https');\nvar path = require('path');\nvar uuid = require('uuid/v4');\n\nvar utils = require('./utils');\nvar Error = require('./Error');\n\nvar hasOwn = {}.hasOwnProperty;\n\nvar defaultHttpAgent = new http.Agent({keepAlive: true});\nvar defaultHttpsAgent = new https.Agent({keepAlive: true});\n\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils.protoExtend;\n\n// Expose method-creator & prepared (basic) methods\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\n\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, urlData) {\n  this._stripe = stripe;\n  this._urlData = urlData || {};\n\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function(methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize.apply(this, arguments);\n}\n\nStripeResource.prototype = {\n\n  path: '',\n\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize: function() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath: function(commandPath, urlData) {\n    return path.join(\n      this.basePath(urlData),\n      this.path(urlData),\n      typeof commandPath == 'function' ?\n        commandPath(urlData) : commandPath\n    ).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols: function(pathWithSymbols) {\n    return '/' + path.join(\n      this.resourcePath,\n      pathWithSymbols || ''\n    ).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  createUrlData: function() {\n    var urlData = {};\n    // Merge in baseData\n    for (var i in this._urlData) {\n      if (hasOwn.call(this._urlData, i)) {\n        urlData[i] = this._urlData[i];\n      }\n    }\n    return urlData;\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler: function(timeout, req, callback) {\n    var self = this;\n    return function() {\n      var timeoutErr = new Error('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n\n      req._isAborted = true;\n      req.abort();\n\n      callback.call(\n        self,\n        new Error.StripeConnectionError({\n          message: 'Request aborted due to timeout being reached (' + timeout + 'ms)',\n          detail: timeoutErr,\n        }),\n        null\n      );\n    }\n  },\n\n  _responseHandler: function(req, callback) {\n    var self = this;\n    return function(res) {\n      var response = '';\n\n      res.setEncoding('utf8');\n      res.on('data', function(chunk) {\n        response += chunk;\n      });\n      res.on('end', function() {\n        var headers = res.headers || {};\n        // NOTE: Stripe responds with lowercase header names/keys.\n\n        // For convenience, make Request-Id easily accessible on\n        // lastResponse.\n        res.requestId = headers['request-id'];\n\n        var requestDurationMs = Date.now() - req._requestStart;\n\n        var responseEvent = utils.removeEmpty({\n          api_version: headers['stripe-version'],\n          account: headers['stripe-account'],\n          idempotency_key: headers['idempotency-key'],\n          method: req._requestEvent.method,\n          path: req._requestEvent.path,\n          status: res.statusCode,\n          request_id: res.requestId,\n          elapsed: requestDurationMs,\n        });\n\n        self._stripe._emitter.emit('response', responseEvent);\n\n        try {\n          response = JSON.parse(response);\n\n          if (response.error) {\n            var err;\n\n            // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n            if (typeof response.error === 'string') {\n              response.error = {\n                type: response.error,\n                message: response.error_description\n              }\n            }\n\n            response.error.headers = headers;\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new Error.StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new Error.StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new Error.StripeRateLimitError(response.error);\n            } else {\n              err = Error.StripeError.generate(response.error);\n            }\n            return callback.call(self, err, null);\n          }\n        } catch (e) {\n          return callback.call(\n            self,\n            new Error.StripeAPIError({\n              message: 'Invalid JSON received from the Stripe API',\n              response: response,\n              exception: e,\n              requestId: headers['request-id'],\n            }),\n            null\n          );\n        }\n\n        self._recordRequestMetrics(res.requestId, requestDurationMs);\n\n        // Expose res object\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res,\n        });\n        callback.call(self, null, response);\n      });\n    };\n  },\n\n  _generateConnectionErrorMessage: function(requestRetries) {\n    return 'An error occurred with our connection to Stripe.' + (requestRetries > 0 ? ' Request was retried ' + requestRetries + ' times.' : '');\n  },\n\n  _errorHandler: function(req, requestRetries, callback) {\n    var self = this;\n    return function(error) {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n      callback.call(\n        self,\n        new Error.StripeConnectionError({\n          message: self._generateConnectionErrorMessage(requestRetries),\n          detail: error,\n        }),\n        null\n      );\n    }\n  },\n\n  _shouldRetry: function(res, numRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= this._stripe.getMaxNetworkRetries()) {\n      return false;\n    }\n\n    // Retry on connection error.\n    if (!res) {\n      return true;\n    }\n\n    // Retry on conflict and availability errors.\n    if (res.statusCode === 409 || res.statusCode === 503) {\n      return true;\n    }\n\n    // Retry on 5xx's, except POST's, which our idempotency framework\n    // would just replay as 500's again anyway.\n    if (res.statusCode >= 500 && res.req._requestEvent.method !== 'POST') {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS: function(numRetries) {\n    var initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n    var maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n\n    // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n    var sleepSeconds = Math.min(\n      initialNetworkRetryDelay * Math.pow(numRetries - 1, 2),\n      maxNetworkRetryDelay\n    );\n\n    // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n    sleepSeconds *= 0.5 * (1 + Math.random());\n\n    // But never sleep less than the base sleep seconds.\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n\n    return sleepSeconds * 1000;\n  },\n\n  _defaultHeaders: function(auth, contentLength, apiVersion) {\n    var userAgentString = 'Stripe/v1 NodeBindings/' + this._stripe.getConstant('PACKAGE_VERSION');\n\n    if (this._stripe._appInfo) {\n      userAgentString += ' ' + this._stripe.getAppInfoAsString();\n    }\n\n    var headers = {\n      // Use specified auth token or use default from this stripe instance:\n      'Authorization': auth ?\n        'Bearer ' + auth :\n        this._stripe.getApiField('auth'),\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': userAgentString,\n    };\n\n    if (apiVersion) {\n      headers['Stripe-Version'] = apiVersion;\n    }\n\n    return headers;\n  },\n\n  _addTelemetryHeader: function(headers) {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      var metrics = this._stripe._prevRequestMetrics.shift();\n      headers['X-Stripe-Client-Telemetry'] = JSON.stringify({\n        'last_request_metrics': metrics\n      });\n    }\n  },\n\n  _recordRequestMetrics: function(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          'request_id': requestId,\n          'request_duration_ms': requestDurationMs,\n        });\n      }\n    }\n  },\n\n  _request: function(method, host, path, data, auth, options, callback) {\n    var self = this;\n    var requestData;\n\n    function makeRequestWithData(error, data) {\n      var apiVersion;\n      var headers;\n\n      if (error) {\n        return callback(error);\n      }\n\n      apiVersion = self._stripe.getApiField('version');\n      requestData = data;\n      headers = self._defaultHeaders(auth, requestData.length, apiVersion);\n\n      self._stripe.getClientUserAgent(function(cua) {\n        headers['X-Stripe-Client-User-Agent'] = cua;\n\n        if (options.headers) {\n          Object.assign(headers, options.headers);\n        }\n\n        self._addTelemetryHeader(headers);\n\n        makeRequest(apiVersion, headers);\n      });\n    }\n\n    if (self.requestDataProcessor) {\n      self.requestDataProcessor(method, data, options.headers, makeRequestWithData);\n    } else {\n      makeRequestWithData(null, utils.stringifyRequestData(data || {}));\n    }\n\n    function retryRequest(requestFn, apiVersion, headers, requestRetries) {\n      requestRetries += 1;\n\n      return setTimeout(\n        requestFn,\n        self._getSleepTimeInMS(requestRetries),\n        apiVersion,\n        headers,\n        requestRetries\n      );\n    }\n\n    function makeRequest(apiVersion, headers, numRetries) {\n      var timeout = self._stripe.getApiField('timeout');\n      var isInsecureConnection = self._stripe.getApiField('protocol') == 'http';\n      var agent = self._stripe.getApiField('agent');\n      if (agent == null) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      var req = (\n        isInsecureConnection ? http : https\n      ).request({\n        host: host || self._stripe.getApiField('host'),\n        port: self._stripe.getApiField('port'),\n        path: path,\n        method: method,\n        agent: agent,\n        headers: headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5',\n      });\n\n      // If this is a POST and we allow multiple retries, set a idempotency key if one is not\n      // already provided.\n      if (method === 'POST' && self._stripe.getMaxNetworkRetries() > 0) {\n        if (!headers.hasOwnProperty('Idempotency-Key')) {\n          headers['Idempotency-Key'] = uuid();\n        }\n      }\n\n      var requestEvent = utils.removeEmpty({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method: method,\n        path: path,\n      });\n\n      var requestRetries = numRetries || 0;\n\n      req._requestEvent = requestEvent;\n\n      req._requestStart = Date.now();\n\n      self._stripe._emitter.emit('request', requestEvent);\n\n      req.setTimeout(timeout, self._timeoutHandler(timeout, req, callback));\n\n      req.on('response', function(res) {\n        if (self._shouldRetry(res, requestRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries);\n        } else {\n          return self._responseHandler(req, callback)(res);\n        }\n      });\n\n      req.on('error', function(error) {\n        if (self._shouldRetry(null, requestRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries);\n        } else {\n          return self._errorHandler(req, requestRetries, callback)(error);\n        }\n      });\n\n      req.on('socket', function(socket) {\n        if (socket.connecting) {\n          socket.on((isInsecureConnection ? 'connect' : 'secureConnect'), function() {\n            // Send payload; we're safe:\n            req.write(requestData);\n            req.end();\n          });\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    }\n  },\n};\n\nmodule.exports = StripeResource;\n"]},"metadata":{},"sourceType":"script"}