{"ast":null,"code":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\nvar stripeMethod = StripeResource.method;\n\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n  path: 'invoices',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del'],\n  finalizeInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/finalize',\n    urlParams: ['invoiceId']\n  }),\n  markUncollectible: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/mark_uncollectible',\n    urlParams: ['invoiceId']\n  }),\n  pay: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/pay',\n    urlParams: ['invoiceId']\n  }),\n  listLineItems: stripeMethod({\n    method: 'GET',\n    path: '{invoiceId}/lines',\n    urlParams: ['invoiceId']\n  }),\n  listUpcomingLineItems: stripeMethod({\n    method: 'GET',\n    path: 'upcoming/lines'\n  }),\n  // deprecated in favor of `listLineItems`\n  retrieveLines: stripeMethod({\n    method: 'GET',\n    path: '{invoiceId}/lines',\n    urlParams: ['invoiceId']\n  }),\n  retrieveUpcoming: stripeMethod({\n    method: 'GET',\n    path: function (urlData) {\n      var url = 'upcoming?';\n      var hasParam = false; // If you pass just a hash with the relevant parameters, including customer id inside.\n\n      if (urlData.invoiceOptionsOrCustomerId && typeof urlData.invoiceOptionsOrCustomerId === 'object') {\n        return url + utils.stringifyRequestData(urlData.invoiceOptionsOrCustomerId);\n      } // Legacy implementation where the first parameter is a customer id as a string\n\n\n      if (urlData.invoiceOptionsOrCustomerId && typeof urlData.invoiceOptionsOrCustomerId === 'string') {\n        url = url + 'customer=' + urlData.invoiceOptionsOrCustomerId;\n        hasParam = true;\n      } // Legacy support where second argument is the subscription id\n\n\n      if (urlData.invoiceOptionsOrSubscriptionId && typeof urlData.invoiceOptionsOrSubscriptionId === 'string') {\n        return url + (hasParam ? '&' : '') + 'subscription=' + urlData.invoiceOptionsOrSubscriptionId;\n      } else if (urlData.invoiceOptionsOrSubscriptionId && typeof urlData.invoiceOptionsOrSubscriptionId === 'object') {\n        return url + (hasParam ? '&' : '') + utils.stringifyRequestData(urlData.invoiceOptionsOrSubscriptionId);\n      }\n\n      return url;\n    },\n    urlParams: ['optional!invoiceOptionsOrCustomerId', 'optional!invoiceOptionsOrSubscriptionId']\n  }),\n  sendInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/send',\n    urlParams: ['invoiceId']\n  }),\n  voidInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/void',\n    urlParams: ['invoiceId']\n  })\n});","map":{"version":3,"sources":["C:/Developing/portfolios/bnb_clone/node_modules/stripe/lib/resources/Invoices.js"],"names":["StripeResource","require","stripeMethod","method","utils","module","exports","extend","path","includeBasic","finalizeInvoice","urlParams","markUncollectible","pay","listLineItems","listUpcomingLineItems","retrieveLines","retrieveUpcoming","urlData","url","hasParam","invoiceOptionsOrCustomerId","stringifyRequestData","invoiceOptionsOrSubscriptionId","sendInvoice","voidInvoice"],"mappings":"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","sourcesContent":["'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n\n  path: 'invoices',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del'],\n\n  finalizeInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/finalize',\n    urlParams: ['invoiceId'],\n  }),\n\n  markUncollectible: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/mark_uncollectible',\n    urlParams: ['invoiceId'],\n  }),\n\n  pay: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/pay',\n    urlParams: ['invoiceId'],\n  }),\n\n  listLineItems: stripeMethod({\n    method: 'GET',\n    path: '{invoiceId}/lines',\n    urlParams: ['invoiceId'],\n  }),\n\n  listUpcomingLineItems: stripeMethod({\n    method: 'GET',\n    path: 'upcoming/lines',\n  }),\n\n  // deprecated in favor of `listLineItems`\n  retrieveLines: stripeMethod({\n    method: 'GET',\n    path: '{invoiceId}/lines',\n    urlParams: ['invoiceId'],\n  }),\n\n  retrieveUpcoming: stripeMethod({\n    method: 'GET',\n    path: function(urlData) {\n      var url = 'upcoming?';\n      var hasParam = false;\n\n      // If you pass just a hash with the relevant parameters, including customer id inside.\n      if (urlData.invoiceOptionsOrCustomerId && typeof urlData.invoiceOptionsOrCustomerId === 'object') {\n        return url + utils.stringifyRequestData(urlData.invoiceOptionsOrCustomerId);\n      }\n\n      // Legacy implementation where the first parameter is a customer id as a string\n      if (urlData.invoiceOptionsOrCustomerId && typeof urlData.invoiceOptionsOrCustomerId === 'string') {\n        url = url + 'customer=' + urlData.invoiceOptionsOrCustomerId;\n        hasParam = true;\n      }\n\n      // Legacy support where second argument is the subscription id\n      if (urlData.invoiceOptionsOrSubscriptionId && typeof urlData.invoiceOptionsOrSubscriptionId === 'string') {\n        return url + (hasParam ? '&' : '') + 'subscription=' + urlData.invoiceOptionsOrSubscriptionId;\n      } else if (urlData.invoiceOptionsOrSubscriptionId && typeof urlData.invoiceOptionsOrSubscriptionId === 'object') {\n        return url + (hasParam ? '&' : '') + utils.stringifyRequestData(urlData.invoiceOptionsOrSubscriptionId);\n      }\n      return url;\n    },\n    urlParams: ['optional!invoiceOptionsOrCustomerId', 'optional!invoiceOptionsOrSubscriptionId'],\n  }),\n\n  sendInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/send',\n    urlParams: ['invoiceId'],\n  }),\n\n  voidInvoice: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/void',\n    urlParams: ['invoiceId'],\n  }),\n});\n"]},"metadata":{},"sourceType":"script"}