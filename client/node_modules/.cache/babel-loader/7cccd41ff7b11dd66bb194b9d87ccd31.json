{"ast":null,"code":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\nvar stripeMethod = StripeResource.method;\nmodule.exports = StripeResource.extend({\n  // Since path can either be `account` or `accounts`, support both through stripeMethod path\n  create: stripeMethod({\n    method: 'POST',\n    path: 'accounts'\n  }),\n  list: stripeMethod({\n    method: 'GET',\n    path: 'accounts',\n    methodType: 'list'\n  }),\n  update: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{id}',\n    urlParams: ['id']\n  }),\n  // Avoid 'delete' keyword in JS\n  del: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{id}',\n    urlParams: ['id']\n  }),\n  reject: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{id}/reject',\n    urlParams: ['id']\n  }),\n  retrieve: function (id) {\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        path: 'accounts/{id}',\n        urlParams: ['id']\n      }).apply(this, arguments);\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply(arguments);\n      }\n\n      return stripeMethod({\n        method: 'GET',\n        path: 'account'\n      }).apply(this, arguments);\n    }\n  },\n\n  /**\n   * Accounts: Capability methods\n   */\n  listCapabilities: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/capabilities',\n    urlParams: ['accountId'],\n    methodType: 'list'\n  }),\n  retrieveCapability: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/capabilities/{capabilityId}',\n    urlParams: ['accountId', 'capabilityId']\n  }),\n  updateCapability: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/capabilities/{capabilityId}',\n    urlParams: ['accountId', 'capabilityId']\n  }),\n\n  /**\n   * Accounts: External account methods\n   */\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/external_accounts',\n    urlParams: ['accountId']\n  }),\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/external_accounts',\n    urlParams: ['accountId'],\n    methodType: 'list'\n  }),\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId']\n  }),\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId']\n  }),\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId']\n  }),\n\n  /**\n  * Accounts: LoginLink methods\n  */\n  createLoginLink: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/login_links',\n    urlParams: ['accountId']\n  }),\n\n  /**\n   * Accounts: Person methods\n   */\n  createPerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/persons',\n    urlParams: ['accountId']\n  }),\n  listPersons: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/persons',\n    urlParams: ['accountId'],\n    methodType: 'list'\n  }),\n  retrievePerson: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/persons/{personId}',\n    urlParams: ['accountId', 'personId']\n  }),\n  updatePerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/persons/{personId}',\n    urlParams: ['accountId', 'personId']\n  }),\n  deletePerson: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{accountId}/persons/{personId}',\n    urlParams: ['accountId', 'personId']\n  })\n});","map":{"version":3,"sources":["C:/Developing/portfolios/bnb_clone/node_modules/stripe/lib/resources/Accounts.js"],"names":["StripeResource","require","stripeMethod","method","module","exports","extend","create","path","list","methodType","update","urlParams","del","reject","retrieve","id","apply","arguments","undefined","shift","listCapabilities","retrieveCapability","updateCapability","createExternalAccount","listExternalAccounts","retrieveExternalAccount","updateExternalAccount","deleteExternalAccount","createLoginLink","createPerson","listPersons","retrievePerson","updatePerson","deletePerson"],"mappings":"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","sourcesContent":["'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n  // Since path can either be `account` or `accounts`, support both through stripeMethod path\n\n  create: stripeMethod({\n    method: 'POST',\n    path: 'accounts',\n  }),\n\n  list: stripeMethod({\n    method: 'GET',\n    path: 'accounts',\n    methodType: 'list',\n  }),\n\n  update: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{id}',\n    urlParams: ['id'],\n  }),\n\n  // Avoid 'delete' keyword in JS\n  del: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{id}',\n    urlParams: ['id'],\n  }),\n\n  reject: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{id}/reject',\n    urlParams: ['id'],\n  }),\n\n  retrieve: function(id) {\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        path: 'accounts/{id}',\n        urlParams: ['id'],\n      }).apply(this, arguments);\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply(arguments);\n      }\n      return stripeMethod({\n        method: 'GET',\n        path: 'account',\n      }).apply(this, arguments);\n    }\n  },\n\n  /**\n   * Accounts: Capability methods\n   */\n\n  listCapabilities: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/capabilities',\n    urlParams: ['accountId'],\n    methodType: 'list',\n  }),\n\n  retrieveCapability: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/capabilities/{capabilityId}',\n    urlParams: ['accountId', 'capabilityId'],\n  }),\n\n  updateCapability: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/capabilities/{capabilityId}',\n    urlParams: ['accountId', 'capabilityId'],\n  }),\n\n  /**\n   * Accounts: External account methods\n   */\n\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/external_accounts',\n    urlParams: ['accountId'],\n  }),\n\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/external_accounts',\n    urlParams: ['accountId'],\n    methodType: 'list',\n  }),\n\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId'],\n  }),\n\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId'],\n  }),\n\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId'],\n  }),\n\n  /**\n  * Accounts: LoginLink methods\n  */\n\n  createLoginLink: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/login_links',\n    urlParams: ['accountId'],\n  }),\n\n  /**\n   * Accounts: Person methods\n   */\n\n  createPerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/persons',\n    urlParams: ['accountId'],\n  }),\n\n  listPersons: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/persons',\n    urlParams: ['accountId'],\n    methodType: 'list',\n  }),\n\n  retrievePerson: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/persons/{personId}',\n    urlParams: ['accountId', 'personId'],\n  }),\n\n  updatePerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/persons/{personId}',\n    urlParams: ['accountId', 'personId'],\n  }),\n\n  deletePerson: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{accountId}/persons/{personId}',\n    urlParams: ['accountId', 'personId'],\n  }),\n});\n"]},"metadata":{},"sourceType":"script"}