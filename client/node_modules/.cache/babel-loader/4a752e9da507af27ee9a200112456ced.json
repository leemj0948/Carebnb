{"ast":null,"code":"import Stripe from 'stripe';\nconst stripe = new Stripe(process.env.SECRET_KEY);\n\nconst payment_intents = async (req, res) => {\n  if (req.method === 'POST') {\n    console.log('dd');\n\n    try {\n      const {\n        amount\n      } = req.body; // Psst. For production-ready applications we recommend not using the\n      // amount directly from the client without verifying it first. This is to\n      // prevent bad actors from changing the total amount on the client before\n      // it gets sent to the server. A good approach is to send the quantity of\n      // a uniquely identifiable product and calculate the total price server-side.\n      // Then, you would only fulfill orders using the quantity you charged for.\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount,\n        currency: 'usd'\n      });\n      res.status(200).send(paymentIntent.client_secret);\n    } catch (err) {\n      res.status(500).json({\n        statusCode: 500,\n        message: err.message\n      });\n    }\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method Not Allowed');\n  }\n};\n\nexport default payment_intents;","map":{"version":3,"sources":["C:/Developing/portfolios/bnb_clone/client/src/payment/api/payment_intents.js"],"names":["Stripe","stripe","process","env","SECRET_KEY","payment_intents","req","res","method","console","log","amount","body","paymentIntent","paymentIntents","create","currency","status","send","client_secret","err","json","statusCode","message","setHeader","end"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,MAAMC,MAAM,GAAG,IAAID,MAAJ,CAAWE,OAAO,CAACC,GAAR,CAAYC,UAAvB,CAAf;;AAEA,MAAMC,eAAe,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;;AACA,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAaL,GAAG,CAACM,IAAvB,CADE,CAEF;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAMC,aAAa,GAAG,MAAMZ,MAAM,CAACa,cAAP,CAAsBC,MAAtB,CAA6B;AACvDJ,QAAAA,MADuD;AAEvDK,QAAAA,QAAQ,EAAE;AAF6C,OAA7B,CAA5B;AAKAT,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,aAAa,CAACM,aAAnC;AACD,KAfD,CAeE,OAAOC,GAAP,EAAY;AACZb,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEC,QAAAA,UAAU,EAAE,GAAd;AAAmBC,QAAAA,OAAO,EAAEH,GAAG,CAACG;AAAhC,OAArB;AACD;AACF,GApBD,MAoBO;AACLhB,IAAAA,GAAG,CAACiB,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACAjB,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBQ,GAAhB,CAAoB,oBAApB;AACD;AACF,CAzBD;;AA2BA,eAAepB,eAAf","sourcesContent":["import Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.SECRET_KEY);\n\nconst payment_intents = async (req, res) => {\n  if (req.method === 'POST') {\n    console.log('dd');\n    try {\n      const { amount } = req.body;\n      // Psst. For production-ready applications we recommend not using the\n      // amount directly from the client without verifying it first. This is to\n      // prevent bad actors from changing the total amount on the client before\n      // it gets sent to the server. A good approach is to send the quantity of\n      // a uniquely identifiable product and calculate the total price server-side.\n      // Then, you would only fulfill orders using the quantity you charged for.\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount,\n        currency: 'usd',\n      });\n\n      res.status(200).send(paymentIntent.client_secret);\n    } catch (err) {\n      res.status(500).json({ statusCode: 500, message: err.message });\n    }\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method Not Allowed');\n  }\n};\n\nexport default payment_intents;\n"]},"metadata":{},"sourceType":"module"}