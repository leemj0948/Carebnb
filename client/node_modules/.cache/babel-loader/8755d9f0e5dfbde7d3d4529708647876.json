{"ast":null,"code":"var _jsxFileName = \"C:\\\\Developing\\\\portfolios\\\\bnb_clone\\\\client\\\\src\\\\Main\\\\Components\\\\Calander.components\\\\Calander.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport 'react-dates/initialize';\nimport './react_dates_overrides.css';\nimport 'react-dates/lib/css/_datepicker.css';\nimport 'react-dates/initialize';\nimport { DateRangePicker } from 'react-dates'; // import '../Calendar.container/Calendar.styles.scss';\n\nimport moment from 'moment'; // import moment from '../../../../node_modules/moment/moment';\n\nimport { connect } from 'react-redux';\nimport { getCalenderDate } from '../../../redux/booking/booking.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calender({\n  props,\n  getUserDate,\n  setStart,\n  setEnd\n}) {\n  _s();\n\n  const [startDate, setStartDate] = useState(moment);\n  const [endDate, setEndDate] = useState(moment);\n  const [focusedInput, setFocusedInput] = useState(null);\n\n  const handleDatesChange = ({\n    startDate,\n    endDate,\n    stayDate\n  }) => {\n    stayDate = (endDate - startDate) / (1000 * 60 * 60 * 24); // console.log((endDate - startDate) / (1000 * 60 * 60 * 24));\n\n    setStartDate(startDate);\n    setEndDate(endDate);\n    let start = new Date(startDate).toLocaleDateString();\n    let end = new Date(endDate).toLocaleDateString();\n    getUserDate(start, end, stayDate);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DateRangePicker // onSubmit ={handleSubmit}\n    , {\n      startDate: startDate // momentPropTypes.momentObj or null,\n      ,\n      startDateId: \"start_date_id\" // PropTypes.string.isRequired,\n      ,\n      endDate: endDate // momentPropTypes.momentObj or null,\n      ,\n      endDateId: \"end_date_id\" // PropTypes.string.isRequired,\n      ,\n      onDatesChange: handleDatesChange // PropTypes.func.isRequired,\n      ,\n      customArrowIcon: true,\n      startDatePlaceholderText: setStart,\n      endDatePlaceholderTex: setEnd,\n      noBorder: true,\n      block: true // navPrev=\"U+3008\"\n      // navNext=\">\"\n      ,\n      focusedInput: focusedInput // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n      ,\n      onFocusChange: focusedInput => setFocusedInput(focusedInput) // PropTypes.func.isRequired,\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n} // const mapStateToProps = ({ booking: { startDay, endDay } }) => ({\n//   startDay,\n//   endDay,\n// });\n\n\n_s(Calender, \"VvYn/1Jotk4KNURmGOUf4+LBJCs=\");\n\n_c = Calender;\n\nconst mapDispatchToProps = dispatch => ({\n  getUserDate: (start, end, stayDate) => dispatch(getCalenderDate(start, end, stayDate))\n});\n\nexport default connect(null, mapDispatchToProps)(Calender);\n\nvar _c;\n\n$RefreshReg$(_c, \"Calender\");","map":{"version":3,"sources":["C:/Developing/portfolios/bnb_clone/client/src/Main/Components/Calander.components/Calander.js"],"names":["React","useEffect","useState","DateRangePicker","moment","connect","getCalenderDate","Calender","props","getUserDate","setStart","setEnd","startDate","setStartDate","endDate","setEndDate","focusedInput","setFocusedInput","handleDatesChange","stayDate","start","Date","toLocaleDateString","end","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,wBAAP;AACA,OAAO,6BAAP;AACA,OAAO,qCAAP;AACA,OAAO,wBAAP;AACA,SAASC,eAAT,QAAgC,aAAhC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,uCAAhC;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,QAAtB;AAAgCC,EAAAA;AAAhC,CAAlB,EAA4D;AAAA;;AAC1D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAACE,MAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACE,MAAD,CAAtC;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAD,CAAhD;;AAEA,QAAMgB,iBAAiB,GAAG,CAAC;AAAEN,IAAAA,SAAF;AAAaE,IAAAA,OAAb;AAAsBK,IAAAA;AAAtB,GAAD,KAAsC;AAC9DA,IAAAA,QAAQ,GAAG,CAACL,OAAO,GAAGF,SAAX,KAAyB,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAA1C,CAAX,CAD8D,CAE9D;;AACAC,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACAG,IAAAA,UAAU,CAACD,OAAD,CAAV;AAEA,QAAIM,KAAK,GAAG,IAAIC,IAAJ,CAAST,SAAT,EAAoBU,kBAApB,EAAZ;AACA,QAAIC,GAAG,GAAG,IAAIF,IAAJ,CAASP,OAAT,EAAkBQ,kBAAlB,EAAV;AACAb,IAAAA,WAAW,CAACW,KAAD,EAAQG,GAAR,EAAaJ,QAAb,CAAX;AACD,GATD;;AAWA,sBACE;AAAA,2BACE,QAAC,eAAD,CACE;AADF;AAEE,MAAA,SAAS,EAAEP,SAFb,CAEwB;AAFxB;AAGE,MAAA,WAAW,EAAC,eAHd,CAG8B;AAH9B;AAIE,MAAA,OAAO,EAAEE,OAJX,CAIoB;AAJpB;AAKE,MAAA,SAAS,EAAC,aALZ,CAK0B;AAL1B;AAME,MAAA,aAAa,EAAEI,iBANjB,CAMoC;AANpC;AAOE,MAAA,eAAe,EAAE,IAPnB;AAQE,MAAA,wBAAwB,EAAER,QAR5B;AASE,MAAA,qBAAqB,EAAEC,MATzB;AAUE,MAAA,QAAQ,EAAE,IAVZ;AAWE,MAAA,KAAK,EAAE,IAXT,CAYE;AACA;AAbF;AAcE,MAAA,YAAY,EAAEK,YAdhB,CAc8B;AAd9B;AAeE,MAAA,aAAa,EAAEA,YAAY,IAAIC,eAAe,CAACD,YAAD,CAfhD,CAegE;;AAfhE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,C,CAED;AACA;AACA;AACA;;;GA3CST,Q;;KAAAA,Q;;AA6CT,MAAMiB,kBAAkB,GAAGC,QAAQ,KAAK;AACtChB,EAAAA,WAAW,EAAE,CAACW,KAAD,EAAQG,GAAR,EAAaJ,QAAb,KACXM,QAAQ,CAACnB,eAAe,CAACc,KAAD,EAAQG,GAAR,EAAaJ,QAAb,CAAhB;AAF4B,CAAL,CAAnC;;AAIA,eAAed,OAAO,CAAC,IAAD,EAAOmB,kBAAP,CAAP,CAAkCjB,QAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport 'react-dates/initialize';\nimport './react_dates_overrides.css';\nimport 'react-dates/lib/css/_datepicker.css';\nimport 'react-dates/initialize';\nimport { DateRangePicker } from 'react-dates';\n// import '../Calendar.container/Calendar.styles.scss';\nimport moment from 'moment';\n// import moment from '../../../../node_modules/moment/moment';\nimport { connect } from 'react-redux';\nimport { getCalenderDate } from '../../../redux/booking/booking.action';\n\nfunction Calender({ props, getUserDate, setStart, setEnd }) {\n  const [startDate, setStartDate] = useState(moment);\n  const [endDate, setEndDate] = useState(moment);\n  const [focusedInput, setFocusedInput] = useState(null);\n\n  const handleDatesChange = ({ startDate, endDate, stayDate }) => {\n    stayDate = (endDate - startDate) / (1000 * 60 * 60 * 24);\n    // console.log((endDate - startDate) / (1000 * 60 * 60 * 24));\n    setStartDate(startDate);\n    setEndDate(endDate);\n\n    let start = new Date(startDate).toLocaleDateString();\n    let end = new Date(endDate).toLocaleDateString();\n    getUserDate(start, end, stayDate);\n  };\n\n  return (\n    <div>\n      <DateRangePicker\n        // onSubmit ={handleSubmit}\n        startDate={startDate} // momentPropTypes.momentObj or null,\n        startDateId=\"start_date_id\" // PropTypes.string.isRequired,\n        endDate={endDate} // momentPropTypes.momentObj or null,\n        endDateId=\"end_date_id\" // PropTypes.string.isRequired,\n        onDatesChange={handleDatesChange} // PropTypes.func.isRequired,\n        customArrowIcon={true}\n        startDatePlaceholderText={setStart}\n        endDatePlaceholderTex={setEnd}\n        noBorder={true}\n        block={true}\n        // navPrev=\"U+3008\"\n        // navNext=\">\"\n        focusedInput={focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n        onFocusChange={focusedInput => setFocusedInput(focusedInput)} // PropTypes.func.isRequired,\n      />\n      {/* <button onClick={}>btn</button> */}\n    </div>\n  );\n}\n\n// const mapStateToProps = ({ booking: { startDay, endDay } }) => ({\n//   startDay,\n//   endDay,\n// });\n\nconst mapDispatchToProps = dispatch => ({\n  getUserDate: (start, end, stayDate) =>\n    dispatch(getCalenderDate(start, end, stayDate)),\n});\nexport default connect(null, mapDispatchToProps)(Calender);\n"]},"metadata":{},"sourceType":"module"}