{"ast":null,"code":"var _jsxFileName = \"C:\\\\Developing\\\\portfolios\\\\bnb_clone\\\\client\\\\src\\\\Main\\\\Components\\\\Calander.components\\\\Calander.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'react-dates/initialize';\nimport './react_dates_overrides.css';\nimport 'react-dates/lib/css/_datepicker.css';\nimport 'react-dates/initialize';\nimport { DateRangePicker } from 'react-dates';\nimport moment from '../../../../node_modules/moment/moment';\nimport { connect } from 'react-redux';\nimport { getCalenderDate } from '../../../redux/booking/booking.action';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calender({\n  props,\n  getUserDate,\n  setStart,\n  setEnd\n}) {\n  _s();\n\n  const [startDate, setStartDate] = useState(moment);\n  const [endDate, setEndDate] = useState(moment);\n  const [focusedInput, setFocusedInput] = useState(null);\n\n  const handleDatesChange = ({\n    startDate,\n    endDate,\n    stayDate\n  }) => {\n    stayDate = (endDate - startDate) / (1000 * 60 * 60 * 24); // console.log((endDate - startDate) / (1000 * 60 * 60 * 24));\n\n    setStartDate(startDate);\n    setEndDate(endDate);\n    let start = new Date(startDate).toLocaleDateString();\n    let end = new Date(endDate).toLocaleDateString();\n    getUserDate(start, end, stayDate);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CalenderHeight, {\n    children: /*#__PURE__*/_jsxDEV(DateRangePicker // onSubmit ={handleSubmit}\n    , {\n      startDate: startDate // momentPropTypes.momentObj or null,\n      ,\n      startDateId: \"start_date_id\" // PropTypes.string.isRequired,\n      ,\n      endDate: endDate // momentPropTypes.momentObj or null,\n      ,\n      endDateId: \"end_date_id\" // PropTypes.string.isRequired,\n      ,\n      onDatesChange: handleDatesChange // PropTypes.func.isRequired,\n      ,\n      customArrowIcon: true // startDatePlaceholderText={setStart}\n      // endDatePlaceholderTex={setEnd}\n      ,\n      noBorder: true,\n      startDatePlaceholderText: \"Add dates\",\n      endDatePlaceholderText: \"Add dates\",\n      block: true // navPrev=\"U+3008\"\n      // navNext=\">\"\n      ,\n      focusedInput: focusedInput // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n      ,\n      onFocusChange: focusedInput => setFocusedInput(focusedInput) // PropTypes.func.isRequired,\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calender, \"VvYn/1Jotk4KNURmGOUf4+LBJCs=\");\n\n_c = Calender;\nconst CalenderHeight = styled.div`\n  color: #484848;\n  height: 0px;\n  .DateRangePickerInput {\n    background-color: transparent;\n    display: flex;\n    justify-content: space-evenly;\n  }\n  .DateInput {\n    background-color: transparent;\n    width: 100px;\n  }\n  input {\n    width: 110px;\n    text-align: center;\n    background-color: transparent;\n    padding: 0;\n  }\n`;\n_c2 = CalenderHeight;\n\nconst mapDispatchToProps = dispatch => ({\n  getUserDate: (start, end, stayDate) => dispatch(getCalenderDate(start, end, stayDate))\n});\n\nexport default connect(null, mapDispatchToProps)(Calender);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Calender\");\n$RefreshReg$(_c2, \"CalenderHeight\");","map":{"version":3,"sources":["C:/Developing/portfolios/bnb_clone/client/src/Main/Components/Calander.components/Calander.js"],"names":["React","useState","DateRangePicker","moment","connect","getCalenderDate","styled","Calender","props","getUserDate","setStart","setEnd","startDate","setStartDate","endDate","setEndDate","focusedInput","setFocusedInput","handleDatesChange","stayDate","start","Date","toLocaleDateString","end","CalenderHeight","div","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,wBAAP;AACA,OAAO,6BAAP;AACA,OAAO,qCAAP;AACA,OAAO,wBAAP;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,OAAOC,MAAP,MAAmB,wCAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,uCAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AACA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,QAAtB;AAAgCC,EAAAA;AAAhC,CAAlB,EAA4D;AAAA;;AAC1D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAACE,MAAD,CAA1C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAACE,MAAD,CAAtC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,IAAD,CAAhD;;AAEA,QAAMiB,iBAAiB,GAAG,CAAC;AAAEN,IAAAA,SAAF;AAAaE,IAAAA,OAAb;AAAsBK,IAAAA;AAAtB,GAAD,KAAsC;AAC9DA,IAAAA,QAAQ,GAAG,CAACL,OAAO,GAAGF,SAAX,KAAyB,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAA1C,CAAX,CAD8D,CAE9D;;AACAC,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACAG,IAAAA,UAAU,CAACD,OAAD,CAAV;AACA,QAAIM,KAAK,GAAG,IAAIC,IAAJ,CAAST,SAAT,EAAoBU,kBAApB,EAAZ;AACA,QAAIC,GAAG,GAAG,IAAIF,IAAJ,CAASP,OAAT,EAAkBQ,kBAAlB,EAAV;AACAb,IAAAA,WAAW,CAACW,KAAD,EAAQG,GAAR,EAAaJ,QAAb,CAAX;AACD,GARD;;AAUA,sBACE,QAAC,cAAD;AAAA,2BACE,QAAC,eAAD,CACE;AADF;AAEE,MAAA,SAAS,EAAEP,SAFb,CAEwB;AAFxB;AAGE,MAAA,WAAW,EAAC,eAHd,CAG8B;AAH9B;AAIE,MAAA,OAAO,EAAEE,OAJX,CAIoB;AAJpB;AAKE,MAAA,SAAS,EAAC,aALZ,CAK0B;AAL1B;AAME,MAAA,aAAa,EAAEI,iBANjB,CAMoC;AANpC;AAOE,MAAA,eAAe,EAAE,IAPnB,CAQE;AACA;AATF;AAUE,MAAA,QAAQ,EAAE,IAVZ;AAWE,MAAA,wBAAwB,EAAC,WAX3B;AAYE,MAAA,sBAAsB,EAAC,WAZzB;AAaE,MAAA,KAAK,EAAE,IAbT,CAcE;AACA;AAfF;AAgBE,MAAA,YAAY,EAAEF,YAhBhB,CAgB8B;AAhB9B;AAiBE,MAAA,aAAa,EAAEA,YAAY,IAAIC,eAAe,CAACD,YAAD,CAjBhD,CAiBgE;;AAjBhE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAvCQT,Q;;KAAAA,Q;AAyCT,MAAMiB,cAAc,GAAGlB,MAAM,CAACmB,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBA;MAAMD,c;;AAoBN,MAAME,kBAAkB,GAAGC,QAAQ,KAAK;AACtClB,EAAAA,WAAW,EAAE,CAACW,KAAD,EAAQG,GAAR,EAAaJ,QAAb,KACXQ,QAAQ,CAACtB,eAAe,CAACe,KAAD,EAAQG,GAAR,EAAaJ,QAAb,CAAhB;AAF4B,CAAL,CAAnC;;AAIA,eAAef,OAAO,CAAC,IAAD,EAAOsB,kBAAP,CAAP,CAAkCnB,QAAlC,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport 'react-dates/initialize';\nimport './react_dates_overrides.css';\nimport 'react-dates/lib/css/_datepicker.css';\nimport 'react-dates/initialize';\nimport { DateRangePicker } from 'react-dates';\nimport moment from '../../../../node_modules/moment/moment';\nimport { connect } from 'react-redux';\nimport { getCalenderDate } from '../../../redux/booking/booking.action';\nimport styled from 'styled-components';\nfunction Calender({ props, getUserDate, setStart, setEnd }) {\n  const [startDate, setStartDate] = useState(moment);\n  const [endDate, setEndDate] = useState(moment);\n  const [focusedInput, setFocusedInput] = useState(null);\n\n  const handleDatesChange = ({ startDate, endDate, stayDate }) => {\n    stayDate = (endDate - startDate) / (1000 * 60 * 60 * 24);\n    // console.log((endDate - startDate) / (1000 * 60 * 60 * 24));\n    setStartDate(startDate);\n    setEndDate(endDate);\n    let start = new Date(startDate).toLocaleDateString();\n    let end = new Date(endDate).toLocaleDateString();\n    getUserDate(start, end, stayDate);\n  };\n\n  return (\n    <CalenderHeight>\n      <DateRangePicker\n        // onSubmit ={handleSubmit}\n        startDate={startDate} // momentPropTypes.momentObj or null,\n        startDateId=\"start_date_id\" // PropTypes.string.isRequired,\n        endDate={endDate} // momentPropTypes.momentObj or null,\n        endDateId=\"end_date_id\" // PropTypes.string.isRequired,\n        onDatesChange={handleDatesChange} // PropTypes.func.isRequired,\n        customArrowIcon={true}\n        // startDatePlaceholderText={setStart}\n        // endDatePlaceholderTex={setEnd}\n        noBorder={true}\n        startDatePlaceholderText=\"Add dates\"\n        endDatePlaceholderText=\"Add dates\"\n        block={true}\n        // navPrev=\"U+3008\"\n        // navNext=\">\"\n        focusedInput={focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n        onFocusChange={focusedInput => setFocusedInput(focusedInput)} // PropTypes.func.isRequired,\n      />\n      {/* <button onClick={}>btn</button> */}\n    </CalenderHeight>\n  );\n}\n\nconst CalenderHeight = styled.div`\n  color: #484848;\n  height: 0px;\n  .DateRangePickerInput {\n    background-color: transparent;\n    display: flex;\n    justify-content: space-evenly;\n  }\n  .DateInput {\n    background-color: transparent;\n    width: 100px;\n  }\n  input {\n    width: 110px;\n    text-align: center;\n    background-color: transparent;\n    padding: 0;\n  }\n`;\n\nconst mapDispatchToProps = dispatch => ({\n  getUserDate: (start, end, stayDate) =>\n    dispatch(getCalenderDate(start, end, stayDate)),\n});\nexport default connect(null, mapDispatchToProps)(Calender);\n"]},"metadata":{},"sourceType":"module"}